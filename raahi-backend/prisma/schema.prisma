// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String?   @unique
  phone             String    @unique
  firstName         String
  lastName          String?
  profileImage      String?
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  rides             Ride[]    @relation("PassengerRides")
  driverProfile     Driver?
  refreshTokens     RefreshToken[]
  notifications     Notification[]
  
  @@map("users")
}

model Driver {
  id                String    @id @default(cuid())
  userId            String    @unique
  licenseNumber     String?   @unique
  licenseExpiry     DateTime?
  vehicleNumber     String?   @unique
  vehicleModel      String?
  vehicleColor      String?
  vehicleYear       Int?
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(true)
  isOnline          Boolean   @default(false)
  currentLatitude   Float?
  currentLongitude  Float?
  rating            Float     @default(0.0)
  totalRides        Int       @default(0)
  totalEarnings     Float     @default(0.0)
  joinedAt          DateTime  @default(now())
  lastActiveAt      DateTime?
  
  // Onboarding fields
  onboardingStatus  OnboardingStatus @default(EMAIL_COLLECTION)
  preferredLanguage String?
  vehicleType       String?
  serviceTypes      String[]  // Array of service types: ["bike_rescue", "raahi_driver"]
  documentsSubmittedAt DateTime?
  documentsVerifiedAt  DateTime?
  verificationNotes    String?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rides             Ride[]    @relation("DriverRides")
  documents         DriverDocument[]
  earnings          DriverEarning[]
  
  @@map("drivers")
}

model DriverDocument {
  id                String    @id @default(cuid())
  driverId          String
  documentType      DocumentType
  documentUrl       String
  documentName      String?
  documentSize      Int?
  isVerified        Boolean   @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?   // Admin user ID who verified
  rejectionReason   String?
  uploadedAt        DateTime  @default(now())
  
  // Relations
  driver            Driver    @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  @@map("driver_documents")
}

model DriverEarning {
  id                String    @id @default(cuid())
  driverId          String
  rideId            String?   @unique
  amount            Float
  commission        Float
  netAmount         Float
  date              DateTime  @default(now())
  
  // Relations
  driver            Driver    @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  @@map("driver_earnings")
}

model Ride {
  id                String    @id @default(cuid())
  passengerId       String
  driverId          String?
  pickupLatitude    Float
  pickupLongitude   Float
  dropLatitude      Float
  dropLongitude     Float
  pickupAddress     String
  dropAddress       String
  distance          Float     // in kilometers
  duration          Int       // in minutes
  baseFare          Float
  distanceFare      Float
  timeFare          Float
  surgeMultiplier   Float     @default(1.0)
  totalFare         Float
  status            RideStatus @default(PENDING)
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  scheduledAt       DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  cancelledAt       DateTime?
  cancellationReason String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  passenger         User      @relation("PassengerRides", fields: [passengerId], references: [id])
  driver            Driver?   @relation("DriverRides", fields: [driverId], references: [id])
  tracking          RideTracking[]
  messages          RideMessage[]
  
  @@map("rides")
}

model RideTracking {
  id                String    @id @default(cuid())
  rideId            String
  latitude          Float
  longitude         Float
  heading           Float?
  speed             Float?
  timestamp         DateTime  @default(now())
  
  // Relations
  ride              Ride      @relation(fields: [rideId], references: [id], onDelete: Cascade)
  
  @@map("ride_tracking")
}

model RideMessage {
  id                String    @id @default(cuid())
  rideId            String
  senderId          String
  message           String
  timestamp         DateTime  @default(now())
  
  // Relations
  ride              Ride      @relation(fields: [rideId], references: [id], onDelete: Cascade)
  
  @@map("ride_messages")
}

model RefreshToken {
  id                String    @id @default(cuid())
  userId            String
  token             String    @unique
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Notification {
  id                String    @id @default(cuid())
  userId            String
  title             String
  message           String
  type              NotificationType
  isRead            Boolean   @default(false)
  data              Json?
  createdAt         DateTime  @default(now())
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model PricingRule {
  id                String    @id @default(cuid())
  name              String
  baseFare          Float
  perKmRate         Float
  perMinuteRate     Float
  surgeMultiplier   Float     @default(1.0)
  peakHourMultiplier Float    @default(1.0)
  isActive          Boolean   @default(true)
  validFrom         DateTime
  validTo           DateTime?
  createdAt         DateTime  @default(now())
  
  @@map("pricing_rules")
}

model SurgeArea {
  id                String    @id @default(cuid())
  name              String
  centerLatitude    Float
  centerLongitude   Float
  radius            Float     // in kilometers
  multiplier        Float
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  
  @@map("surge_areas")
}

// Enums
enum DocumentType {
  LICENSE
  RC
  INSURANCE
  PUC
  PROFILE_PHOTO
  PAN_CARD
  AADHAAR_CARD
}

enum OnboardingStatus {
  EMAIL_COLLECTION
  LANGUAGE_SELECTION
  EARNING_SETUP
  VEHICLE_SELECTION
  LICENSE_UPLOAD
  PROFILE_PHOTO
  PHOTO_CONFIRMATION
  DOCUMENT_UPLOAD
  DOCUMENT_VERIFICATION
  COMPLETED
  REJECTED
}

enum RideStatus {
  PENDING
  CONFIRMED
  DRIVER_ASSIGNED
  DRIVER_ARRIVED
  RIDE_STARTED
  RIDE_COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum NotificationType {
  RIDE_UPDATE
  PAYMENT
  PROMOTION
  SYSTEM
}
